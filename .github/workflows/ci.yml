name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    environment: prd

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        pip install -r requirements.txt
  
    - name: Run tests
      run: |
        source venv/bin/activate
        make test
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}

    - name: Lint code
      run: |
        source venv/bin/activate
        make lint

    - name: Build Docker image
      run: |
        docker build -t ai-hiring-matcher .

    - name: Push Docker image to Docker Hub
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        docker tag ai-hiring-matcher "$DOCKER_USERNAME"/ai-hiring-matcher
        docker push "$DOCKER_USERNAME"/ai-hiring-matcher
  deploy:
    runs-on: ubuntu-latest
    environment: prd
    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up SSH key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

    - name: Transfer files to EC2
      run: |
        ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} "mkdir -p ~/app/src/"
        scp -o StrictHostKeyChecking=no -r ./src/* ec2-user@${{ secrets.EC2_HOST }}:~/app/src/
        scp -o StrictHostKeyChecking=no docker-compose.cd.yml ec2-user@${{ secrets.EC2_HOST }}:~/app/

    - name: Run Docker Compose on EC2
      run: |
        ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          cd ~/app/
          docker-compose down || true
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
          AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }} \
          S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }} \
          RAW_PATH=$RAW_PATH \
          docker-compose -f docker-compose.cd.yml up -d
        EOF